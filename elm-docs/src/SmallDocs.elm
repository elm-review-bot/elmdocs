module SmallDocs exposing (..)


smallDocs =
    """
[{"name":"Payment.CreditCard.Validation","comment":"","unions":[],"aliases":[],"values":[{"name":"isValid","comment":"","type":"String.String -> Basics.Bool"}],"binops":[]}]
"""

coreDocs = """
[{"name":"Array","comment":"","unions":[{"name":"Array","comment":"","args":["a"],"cases":[]}],"aliases":[],"values":[{"name":"append","comment":"","type":"Array.Array a -> Array.Array a -> Array.Array a"},{"name":"empty","comment":"","type":"Array.Array a"},{"name":"filter","comment":"","type":"(a -> Basics.Bool) -> Array.Array a -> Array.Array a"},{"name":"foldl","comment":"","type":"(a -> b -> b) -> b -> Array.Array a -> b"},{"name":"foldr","comment":"","type":"(a -> b -> b) -> b -> Array.Array a -> b"},{"name":"fromList","comment":"","type":"List.List a -> Array.Array a"},{"name":"get","comment":"","type":"Basics.Int -> Array.Array a -> Maybe.Maybe a"},{"name":"indexedMap","comment":"","type":"(Basics.Int -> a -> b) -> Array.Array a -> Array.Array b"},{"name":"initialize","comment":"","type":"Basics.Int -> (Basics.Int -> a) -> Array.Array a"},{"name":"isEmpty","comment":"","type":"Array.Array a -> Basics.Bool"},{"name":"length","comment":"","type":"Array.Array a -> Basics.Int"},{"name":"map","comment":"","type":"(a -> b) -> Array.Array a -> Array.Array b"},{"name":"push","comment":"","type":"a -> Array.Array a -> Array.Array a"},{"name":"repeat","comment":"","type":"Basics.Int -> a -> Array.Array a"},{"name":"set","comment":"","type":"Basics.Int -> a -> Array.Array a -> Array.Array a"},{"name":"slice","comment":"","type":"Basics.Int -> Basics.Int -> Array.Array a -> Array.Array a"},{"name":"toIndexedList","comment":"","type":"Array.Array a -> List.List ( Basics.Int, a )"},{"name":"toList","comment":"","type":"Array.Array a -> List.List a"}],"binops":[]},{"name":"Basics","comment":"","unions":[{"name":"Bool","comment":"","args":[],"cases":[["True",[]],["False",[]]]},{"name":"Float","comment":"","args":[],"cases":[]},{"name":"Int","comment":"","args":[],"cases":[]},{"name":"Never","comment":"","args":[],"cases":[]},{"name":"Order","comment":"","args":[],"cases":[["LT",[]],["EQ",[]],["GT",[]]]}],"aliases":[],"values":[{"name":"abs","comment":"","type":"number -> number"},{"name":"acos","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"always","comment":"","type":"a -> b -> a"},{"name":"asin","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"atan","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"atan2","comment":"","type":"Basics.Float -> Basics.Float -> Basics.Float"},{"name":"ceiling","comment":"","type":"Basics.Float -> Basics.Int"},{"name":"clamp","comment":"","type":"number -> number -> number -> number"},{"name":"compare","comment":"","type":"comparable -> comparable -> Basics.Order"},{"name":"cos","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"degrees","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"e","comment":"","type":"Basics.Float"},{"name":"floor","comment":"","type":"Basics.Float -> Basics.Int"},{"name":"fromPolar","comment":"","type":"( Basics.Float, Basics.Float ) -> ( Basics.Float, Basics.Float )"},{"name":"identity","comment":"","type":"a -> a"},{"name":"isInfinite","comment":"","type":"Basics.Float -> Basics.Bool"},{"name":"isNaN","comment":"","type":"Basics.Float -> Basics.Bool"},{"name":"logBase","comment":"","type":"Basics.Float -> Basics.Float -> Basics.Float"},{"name":"max","comment":"","type":"comparable -> comparable -> comparable"},{"name":"min","comment":"","type":"comparable -> comparable -> comparable"},{"name":"modBy","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"negate","comment":"","type":"number -> number"},{"name":"never","comment":"","type":"Basics.Never -> a"},{"name":"not","comment":"","type":"Basics.Bool -> Basics.Bool"},{"name":"pi","comment":"","type":"Basics.Float"},{"name":"radians","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"remainderBy","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"round","comment":"","type":"Basics.Float -> Basics.Int"},{"name":"sin","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"sqrt","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"tan","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"toFloat","comment":"","type":"Basics.Int -> Basics.Float"},{"name":"toPolar","comment":"","type":"( Basics.Float, Basics.Float ) -> ( Basics.Float, Basics.Float )"},{"name":"truncate","comment":"","type":"Basics.Float -> Basics.Int"},{"name":"turns","comment":"","type":"Basics.Float -> Basics.Float"},{"name":"xor","comment":"","type":"Basics.Bool -> Basics.Bool -> Basics.Bool"}],"binops":[{"name":"&&","comment":"","type":"Basics.Bool -> Basics.Bool -> Basics.Bool","associativity":"right","precedence":3},{"name":"*","comment":"","type":"number -> number -> number","associativity":"left","precedence":7},{"name":"+","comment":"","type":"number -> number -> number","associativity":"left","precedence":6},{"name":"++","comment":"","type":"appendable -> appendable -> appendable","associativity":"right","precedence":5},{"name":"-","comment":"","type":"number -> number -> number","associativity":"left","precedence":6},{"name":"/","comment":"","type":"Basics.Float -> Basics.Float -> Basics.Float","associativity":"left","precedence":7},{"name":"//","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int","associativity":"left","precedence":7},{"name":"/=","comment":"","type":"a -> a -> Basics.Bool","associativity":"non","precedence":4},{"name":"<","comment":"","type":"comparable -> comparable -> Basics.Bool","associativity":"non","precedence":4},{"name":"<<","comment":"","type":"(b -> c) -> (a -> b) -> a -> c","associativity":"left","precedence":9},{"name":"<=","comment":"","type":"comparable -> comparable -> Basics.Bool","associativity":"non","precedence":4},{"name":"<|","comment":"","type":"(a -> b) -> a -> b","associativity":"right","precedence":0},{"name":"==","comment":"","type":"a -> a -> Basics.Bool","associativity":"non","precedence":4},{"name":">","comment":"","type":"comparable -> comparable -> Basics.Bool","associativity":"non","precedence":4},{"name":">=","comment":"","type":"comparable -> comparable -> Basics.Bool","associativity":"non","precedence":4},{"name":">>","comment":"","type":"(a -> b) -> (b -> c) -> a -> c","associativity":"right","precedence":9},{"name":"^","comment":"","type":"number -> number -> number","associativity":"right","precedence":8},{"name":"|>","comment":"","type":"a -> (a -> b) -> b","associativity":"left","precedence":0},{"name":"||","comment":"","type":"Basics.Bool -> Basics.Bool -> Basics.Bool","associativity":"right","precedence":2}]},{"name":"Bitwise","comment":"","unions":[],"aliases":[],"values":[{"name":"and","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"complement","comment":"","type":"Basics.Int -> Basics.Int"},{"name":"or","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"shiftLeftBy","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"shiftRightBy","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"shiftRightZfBy","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"},{"name":"xor","comment":"","type":"Basics.Int -> Basics.Int -> Basics.Int"}],"binops":[]},{"name":"Char","comment":"","unions":[{"name":"Char","comment":"","args":[],"cases":[]}],"aliases":[],"values":[{"name":"fromCode","comment":"","type":"Basics.Int -> Char.Char"},{"name":"isAlpha","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isAlphaNum","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isDigit","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isHexDigit","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isLower","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isOctDigit","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"isUpper","comment":"","type":"Char.Char -> Basics.Bool"},{"name":"toCode","comment":"","type":"Char.Char -> Basics.Int"},{"name":"toLocaleLower","comment":"","type":"Char.Char -> Char.Char"},{"name":"toLocaleUpper","comment":"","type":"Char.Char -> Char.Char"},{"name":"toLower","comment":"","type":"Char.Char -> Char.Char"},{"name":"toUpper","comment":"","type":"Char.Char -> Char.Char"}],"binops":[]},{"name":"Debug","comment":"","unions":[],"aliases":[],"values":[{"name":"log","comment":"","type":"String.String -> a -> a"},{"name":"toString","comment":"","type":"a -> String.String"},{"name":"todo","comment":"","type":"String.String -> a"}],"binops":[]},{"name":"Dict","comment":"","unions":[{"name":"Dict","comment":"","args":["k","v"],"cases":[]}],"aliases":[],"values":[{"name":"diff","comment":"","type":"Dict.Dict comparable a -> Dict.Dict comparable b -> Dict.Dict comparable a"},{"name":"empty","comment":"","type":"Dict.Dict k v"},{"name":"filter","comment":"","type":"(comparable -> v -> Basics.Bool) -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"foldl","comment":"","type":"(k -> v -> b -> b) -> b -> Dict.Dict k v -> b"},{"name":"foldr","comment":"","type":"(k -> v -> b -> b) -> b -> Dict.Dict k v -> b"},{"name":"fromList","comment":"","type":"List.List ( comparable, v ) -> Dict.Dict comparable v"},{"name":"get","comment":"","type":"comparable -> Dict.Dict comparable v -> Maybe.Maybe v"},{"name":"insert","comment":"","type":"comparable -> v -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"intersect","comment":"","type":"Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"isEmpty","comment":"","type":"Dict.Dict k v -> Basics.Bool"},{"name":"keys","comment":"","type":"Dict.Dict k v -> List.List k"},{"name":"map","comment":"","type":"(k -> a -> b) -> Dict.Dict k a -> Dict.Dict k b"},{"name":"member","comment":"","type":"comparable -> Dict.Dict comparable v -> Basics.Bool"},{"name":"merge","comment":"","type":"(comparable -> a -> result -> result) -> (comparable -> a -> b -> result -> result) -> (comparable -> b -> result -> result) -> Dict.Dict comparable a -> Dict.Dict comparable b -> result -> result"},{"name":"partition","comment":"","type":"(comparable -> v -> Basics.Bool) -> Dict.Dict comparable v -> ( Dict.Dict comparable v, Dict.Dict comparable v )"},{"name":"remove","comment":"","type":"comparable -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"singleton","comment":"","type":"comparable -> v -> Dict.Dict comparable v"},{"name":"size","comment":"","type":"Dict.Dict k v -> Basics.Int"},{"name":"toList","comment":"","type":"Dict.Dict k v -> List.List ( k, v )"},{"name":"union","comment":"","type":"Dict.Dict comparable v -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"update","comment":"","type":"comparable -> (Maybe.Maybe v -> Maybe.Maybe v) -> Dict.Dict comparable v -> Dict.Dict comparable v"},{"name":"values","comment":"","type":"Dict.Dict k v -> List.List v"}],"binops":[]},{"name":"List","comment":"","unions":[],"aliases":[],"values":[{"name":"all","comment":"","type":"(a -> Basics.Bool) -> List.List a -> Basics.Bool"},{"name":"any","comment":"","type":"(a -> Basics.Bool) -> List.List a -> Basics.Bool"},{"name":"append","comment":"","type":"List.List a -> List.List a -> List.List a"},{"name":"concat","comment":"","type":"List.List (List.List a) -> List.List a"},{"name":"concatMap","comment":"","type":"(a -> List.List b) -> List.List a -> List.List b"},{"name":"drop","comment":"","type":"Basics.Int -> List.List a -> List.List a"},{"name":"filter","comment":"","type":"(a -> Basics.Bool) -> List.List a -> List.List a"},{"name":"filterMap","comment":"","type":"(a -> Maybe.Maybe b) -> List.List a -> List.List b"},{"name":"foldl","comment":"","type":"(a -> b -> b) -> b -> List.List a -> b"},{"name":"foldr","comment":"","type":"(a -> b -> b) -> b -> List.List a -> b"},{"name":"head","comment":"","type":"List.List a -> Maybe.Maybe a"},{"name":"indexedMap","comment":"","type":"(Basics.Int -> a -> b) -> List.List a -> List.List b"},{"name":"intersperse","comment":"","type":"a -> List.List a -> List.List a"},{"name":"isEmpty","comment":"","type":"List.List a -> Basics.Bool"},{"name":"length","comment":"","type":"List.List a -> Basics.Int"},{"name":"map","comment":"","type":"(a -> b) -> List.List a -> List.List b"},{"name":"map2","comment":"","type":"(a -> b -> result) -> List.List a -> List.List b -> List.List result"},{"name":"map3","comment":"","type":"(a -> b -> c -> result) -> List.List a -> List.List b -> List.List c -> List.List result"},{"name":"map4","comment":"","type":"(a -> b -> c -> d -> result) -> List.List a -> List.List b -> List.List c -> List.List d -> List.List result"},{"name":"map5","comment":"","type":"(a -> b -> c -> d -> e -> result) -> List.List a -> List.List b -> List.List c -> List.List d -> List.List e -> List.List result"},{"name":"maximum","comment":"","type":"List.List comparable -> Maybe.Maybe comparable"},{"name":"member","comment":"","type":"a -> List.List a -> Basics.Bool"},{"name":"minimum","comment":"","type":"List.List comparable -> Maybe.Maybe comparable"},{"name":"partition","comment":"","type":"(a -> Basics.Bool) -> List.List a -> ( List.List a, List.List a )"},{"name":"product","comment":"","type":"List.List number -> number"},{"name":"range","comment":"","type":"Basics.Int -> Basics.Int -> List.List Basics.Int"},{"name":"repeat","comment":"","type":"Basics.Int -> a -> List.List a"},{"name":"reverse","comment":"","type":"List.List a -> List.List a"},{"name":"singleton","comment":"","type":"a -> List.List a"},{"name":"sort","comment":"","type":"List.List comparable -> List.List comparable"},{"name":"sortBy","comment":"","type":"(a -> comparable) -> List.List a -> List.List a"},{"name":"sortWith","comment":"","type":"(a -> a -> Basics.Order) -> List.List a -> List.List a"},{"name":"sum","comment":"","type":"List.List number -> number"},{"name":"tail","comment":"","type":"List.List a -> Maybe.Maybe (List.List a)"},{"name":"take","comment":"","type":"Basics.Int -> List.List a -> List.List a"},{"name":"unzip","comment":"","type":"List.List ( a, b ) -> ( List.List a, List.List b )"}],"binops":[{"name":"::","comment":"","type":"a -> List.List a -> List.List a","associativity":"right","precedence":5}]},{"name":"Maybe","comment":"","unions":[{"name":"Maybe","comment":"","args":["a"],"cases":[["Just",["a"]],["Nothing",[]]]}],"aliases":[],"values":[{"name":"andThen","comment":"","type":"(a -> Maybe.Maybe b) -> Maybe.Maybe a -> Maybe.Maybe b"},{"name":"map","comment":"","type":"(a -> b) -> Maybe.Maybe a -> Maybe.Maybe b"},{"name":"map2","comment":"","type":"(a -> b -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe value"},{"name":"map3","comment":"","type":"(a -> b -> c -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe value"},{"name":"map4","comment":"","type":"(a -> b -> c -> d -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe value"},{"name":"map5","comment":"","type":"(a -> b -> c -> d -> e -> value) -> Maybe.Maybe a -> Maybe.Maybe b -> Maybe.Maybe c -> Maybe.Maybe d -> Maybe.Maybe e -> Maybe.Maybe value"},{"name":"withDefault","comment":"","type":"a -> Maybe.Maybe a -> a"}],"binops":[]},{"name":"Platform","comment":"","unions":[{"name":"ProcessId","comment":"","args":[],"cases":[]},{"name":"Program","comment":"","args":["flags","model","msg"],"cases":[]},{"name":"Router","comment":"","args":["appMsg","selfMsg"],"cases":[]},{"name":"Task","comment":"","args":["err","ok"],"cases":[]}],"aliases":[],"values":[{"name":"sendToApp","comment":"","type":"Platform.Router msg a -> msg -> Platform.Task x ()"},{"name":"sendToSelf","comment":"","type":"Platform.Router a msg -> msg -> Platform.Task x ()"},{"name":"worker","comment":"","type":"{ init : flags -> ( model, Platform.Cmd.Cmd msg ), update : msg -> model -> ( model, Platform.Cmd.Cmd msg ), subscriptions : model -> Platform.Sub.Sub msg } -> Platform.Program flags model msg"}],"binops":[]},{"name":"Platform.Cmd","comment":"","unions":[{"name":"Cmd","comment":"","args":["msg"],"cases":[]}],"aliases":[],"values":[{"name":"batch","comment":"","type":"List.List (Platform.Cmd.Cmd msg) -> Platform.Cmd.Cmd msg"},{"name":"map","comment":"","type":"(a -> msg) -> Platform.Cmd.Cmd a -> Platform.Cmd.Cmd msg"},{"name":"none","comment":"","type":"Platform.Cmd.Cmd msg"}],"binops":[]},{"name":"Platform.Sub","comment":"","unions":[{"name":"Sub","comment":"","args":["msg"],"cases":[]}],"aliases":[],"values":[{"name":"batch","comment":"","type":"List.List (Platform.Sub.Sub msg) -> Platform.Sub.Sub msg"},{"name":"map","comment":"","type":"(a -> msg) -> Platform.Sub.Sub a -> Platform.Sub.Sub msg"},{"name":"none","comment":"","type":"Platform.Sub.Sub msg"}],"binops":[]},{"name":"Process","comment":"","unions":[],"aliases":[{"name":"Id","comment":"","args":[],"type":"Platform.ProcessId"}],"values":[{"name":"kill","comment":"","type":"Process.Id -> Task.Task x ()"},{"name":"sleep","comment":"","type":"Basics.Float -> Task.Task x ()"},{"name":"spawn","comment":"","type":"Task.Task x a -> Task.Task y Process.Id"}],"binops":[]},{"name":"Result","comment":"","unions":[{"name":"Result","comment":"","args":["error","value"],"cases":[["Ok",["value"]],["Err",["error"]]]}],"aliases":[],"values":[{"name":"andThen","comment":"","type":"(a -> Result.Result x b) -> Result.Result x a -> Result.Result x b"},{"name":"fromMaybe","comment":"","type":"x -> Maybe.Maybe a -> Result.Result x a"},{"name":"map","comment":"","type":"(a -> value) -> Result.Result x a -> Result.Result x value"},{"name":"map2","comment":"","type":"(a -> b -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x value"},{"name":"map3","comment":"","type":"(a -> b -> c -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x value"},{"name":"map4","comment":"","type":"(a -> b -> c -> d -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x value"},{"name":"map5","comment":"","type":"(a -> b -> c -> d -> e -> value) -> Result.Result x a -> Result.Result x b -> Result.Result x c -> Result.Result x d -> Result.Result x e -> Result.Result x value"},{"name":"mapError","comment":"","type":"(x -> y) -> Result.Result x a -> Result.Result y a"},{"name":"toMaybe","comment":"","type":"Result.Result x a -> Maybe.Maybe a"},{"name":"withDefault","comment":"","type":"a -> Result.Result x a -> a"}],"binops":[]},{"name":"Set","comment":"","unions":[{"name":"Set","comment":"","args":["t"],"cases":[]}],"aliases":[],"values":[{"name":"diff","comment":"","type":"Set.Set comparable -> Set.Set comparable -> Set.Set comparable"},{"name":"empty","comment":"","type":"Set.Set a"},{"name":"filter","comment":"","type":"(comparable -> Basics.Bool) -> Set.Set comparable -> Set.Set comparable"},{"name":"foldl","comment":"","type":"(a -> b -> b) -> b -> Set.Set a -> b"},{"name":"foldr","comment":"","type":"(a -> b -> b) -> b -> Set.Set a -> b"},{"name":"fromList","comment":"","type":"List.List comparable -> Set.Set comparable"},{"name":"insert","comment":"","type":"comparable -> Set.Set comparable -> Set.Set comparable"},{"name":"intersect","comment":"","type":"Set.Set comparable -> Set.Set comparable -> Set.Set comparable"},{"name":"isEmpty","comment":"","type":"Set.Set a -> Basics.Bool"},{"name":"map","comment":"","type":"(comparable -> comparable2) -> Set.Set comparable -> Set.Set comparable2"},{"name":"member","comment":"","type":"comparable -> Set.Set comparable -> Basics.Bool"},{"name":"partition","comment":"","type":"(comparable -> Basics.Bool) -> Set.Set comparable -> ( Set.Set comparable, Set.Set comparable )"},{"name":"remove","comment":"","type":"comparable -> Set.Set comparable -> Set.Set comparable"},{"name":"singleton","comment":"","type":"comparable -> Set.Set comparable"},{"name":"size","comment":"","type":"Set.Set a -> Basics.Int"},{"name":"toList","comment":"","type":"Set.Set a -> List.List a"},{"name":"union","comment":"","type":"Set.Set comparable -> Set.Set comparable -> Set.Set comparable"}],"binops":[]},{"name":"String","comment":"","unions":[{"name":"String","comment":"","args":[],"cases":[]}],"aliases":[],"values":[{"name":"all","comment":"","type":"(Char.Char -> Basics.Bool) -> String.String -> Basics.Bool"},{"name":"any","comment":"","type":"(Char.Char -> Basics.Bool) -> String.String -> Basics.Bool"},{"name":"append","comment":"","type":"String.String -> String.String -> String.String"},{"name":"concat","comment":"","type":"List.List String.String -> String.String"},{"name":"cons","comment":"","type":"Char.Char -> String.String -> String.String"},{"name":"contains","comment":"","type":"String.String -> String.String -> Basics.Bool"},{"name":"dropLeft","comment":"","type":"Basics.Int -> String.String -> String.String"},{"name":"dropRight","comment":"","type":"Basics.Int -> String.String -> String.String"},{"name":"endsWith","comment":"","type":"String.String -> String.String -> Basics.Bool"},{"name":"filter","comment":"","type":"(Char.Char -> Basics.Bool) -> String.String -> String.String"},{"name":"foldl","comment":"","type":"(Char.Char -> b -> b) -> b -> String.String -> b"},{"name":"foldr","comment":"","type":"(Char.Char -> b -> b) -> b -> String.String -> b"},{"name":"fromChar","comment":"","type":"Char.Char -> String.String"},{"name":"fromFloat","comment":"","type":"Basics.Float -> String.String"},{"name":"fromInt","comment":"","type":"Basics.Int -> String.String"},{"name":"fromList","comment":"","type":"List.List Char.Char -> String.String"},{"name":"indexes","comment":"","type":"String.String -> String.String -> List.List Basics.Int"},{"name":"indices","comment":"","type":"String.String -> String.String -> List.List Basics.Int"},{"name":"isEmpty","comment":"","type":"String.String -> Basics.Bool"},{"name":"join","comment":"","type":"String.String -> List.List String.String -> String.String"},{"name":"left","comment":"","type":"Basics.Int -> String.String -> String.String"},{"name":"length","comment":"","type":"String.String -> Basics.Int"},{"name":"lines","comment":"","type":"String.String -> List.List String.String"},{"name":"map","comment":"","type":"(Char.Char -> Char.Char) -> String.String -> String.String"},{"name":"pad","comment":"","type":"Basics.Int -> Char.Char -> String.String -> String.String"},{"name":"padLeft","comment":"","type":"Basics.Int -> Char.Char -> String.String -> String.String"},{"name":"padRight","comment":"","type":"Basics.Int -> Char.Char -> String.String -> String.String"},{"name":"repeat","comment":"","type":"Basics.Int -> String.String -> String.String"},{"name":"replace","comment":"","type":"String.String -> String.String -> String.String -> String.String"},{"name":"reverse","comment":"","type":"String.String -> String.String"},{"name":"right","comment":"","type":"Basics.Int -> String.String -> String.String"},{"name":"slice","comment":"","type":"Basics.Int -> Basics.Int -> String.String -> String.String"},{"name":"split","comment":"","type":"String.String -> String.String -> List.List String.String"},{"name":"startsWith","comment":"","type":"String.String -> String.String -> Basics.Bool"},{"name":"toFloat","comment":"","type":"String.String -> Maybe.Maybe Basics.Float"},{"name":"toInt","comment":"","type":"String.String -> Maybe.Maybe Basics.Int"},{"name":"toList","comment":"","type":"String.String -> List.List Char.Char"},{"name":"toLower","comment":"","type":"String.String -> String.String"},{"name":"toUpper","comment":"","type":"String.String -> String.String"},{"name":"trim","comment":"","type":"String.String -> String.String"},{"name":"trimLeft","comment":"","type":"String.String -> String.String"},{"name":"trimRight","comment":"","type":"String.String -> String.String"},{"name":"uncons","comment":"","type":"String.String -> Maybe.Maybe ( Char.Char, String.String )"},{"name":"words","comment":"","type":"String.String -> List.List String.String"}],"binops":[]},{"name":"Task","comment":"","unions":[],"aliases":[{"name":"Task","comment":"","args":["x","a"],"type":"Platform.Task x a"}],"values":[{"name":"andThen","comment":"","type":"(a -> Task.Task x b) -> Task.Task x a -> Task.Task x b"},{"name":"attempt","comment":"","type":"(Result.Result x a -> msg) -> Task.Task x a -> Platform.Cmd.Cmd msg"},{"name":"fail","comment":"","type":"x -> Task.Task x a"},{"name":"map","comment":"","type":"(a -> b) -> Task.Task x a -> Task.Task x b"},{"name":"map2","comment":"","type":"(a -> b -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x result"},{"name":"map3","comment":"","type":"(a -> b -> c -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x result"},{"name":"map4","comment":"","type":"(a -> b -> c -> d -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x result"},{"name":"map5","comment":"","type":"(a -> b -> c -> d -> e -> result) -> Task.Task x a -> Task.Task x b -> Task.Task x c -> Task.Task x d -> Task.Task x e -> Task.Task x result"},{"name":"mapError","comment":"","type":"(x -> y) -> Task.Task x a -> Task.Task y a"},{"name":"onError","comment":"","type":"(x -> Task.Task y a) -> Task.Task x a -> Task.Task y a"},{"name":"perform","comment":"","type":"(a -> msg) -> Task.Task Basics.Never a -> Platform.Cmd.Cmd msg"},{"name":"sequence","comment":"","type":"List.List (Task.Task x a) -> Task.Task x (List.List a)"},{"name":"succeed","comment":"","type":"a -> Task.Task x a"}],"binops":[]},{"name":"Tuple","comment":"","unions":[],"aliases":[],"values":[{"name":"first","comment":"","type":"( a, b ) -> a"},{"name":"mapBoth","comment":"","type":"(a -> x) -> (b -> y) -> ( a, b ) -> ( x, y )"},{"name":"mapFirst","comment":"","type":"(a -> x) -> ( a, b ) -> ( x, b )"},{"name":"mapSecond","comment":"","type":"(b -> y) -> ( a, b ) -> ( a, y )"},{"name":"pair","comment":"","type":"a -> b -> ( a, b )"},{"name":"second","comment":"","type":"( a, b ) -> b"}],"binops":[]}]
"""
